/*
 ===== 3. FUNCTION THE ULTIMATE =====

 - Function is a method/class/constuctor/module.

 - Produces an instance of a function object.

 - Function objects are first class:
 1. May be passed as an argument to a function
 2. May be returned from a function
 3. May assigned to a variable
 4. May be stored in an object or array

 - Function objects inherit from Function.prototype

 - Function expression vs Function statement.

 - If the first token in statement is a function, then it is
 a function statement.

 - Block scope vs Function scope.

 - If there is no expression, then the return value is undefined.
 Except for constructors, whose default return value is this.

 - Each function get two parameters - arguments and this.

 === THIS ===
 - The this parameter contains a reference to the object of invocation
 - this allows a method to know what object it is concerned with.
 - this allows a single function object to service many objects.
 - this is a key to prototypal inheritance.


 === INVOCATION ===
 - The () suffix operator surrounding zero or more comma separated arguments.
 - The arguments will be bound to parameters.
 - If a function is called with too many arguments, the extra arguments
 are ignored.
 - If a function is called with too few arguments, the missing values
 will be undefined.
 - There is no implicit type checking on the arguments.

 - There are four ways to call a function:
 1. Function form - functionObject(arguments
 2. Method form - thisObject.methodName(arguments)
 3. Constructor form - new FunctionObject(arguments)
 4. Apply form - functionObject.apply(thisObject, [arguments])

 - new FunctionValue(arguments):
 1. When a function is called with the new operator, a new
 object is created and assigned to this.
 2. If there is not an explicit return value, then this
 will be returned.
 3. Used in the pseudoclassical style.
 */

function getObj(){
    this.test = function(){
        console.log('Test succesful!');
    }
}

var _obj = new getObj();

_obj.test();

/*
 - Apply form
 1. functionObject.apply(thisObject, arguments)
 functionObject.call(thisObject, arguments)
 2. A function's apply or call method allows for
 calling the function, explicitly specifying thisObject.
 3. It can also take an array of parameters or a sequence
 of parameters.

 === SUBROUTINES ===
 - Code reuse
 - Decomposition
 - Modularity
 - Expressiveness
 - Higher order

 === CLOSURES ===
 - The context of an inner function includes the scope
 of the outer function.
 - An inner function enjoys that context even
 after the parent functions have returned.
 - Function scope works like block scope.

 === GLOBAL ===

 === CLOSURE ===
 */

(function(){

    var digit_name = (function(){

        // --- will be created once ---
        var names = ['uno','dos','tres','quatro'];

        // --- closure in action ---
        return function(n){
            return names[n];
        }

    }());

    console.log(digit_name(3));

}());

/*=== PSEUDOCLASSICAL INHERITANCE ===*/

(function(){

    // Gizmo class

    function Gizmo(id){
        this.id = id;
    }

    Gizmo.prototype.toString = function(){
        return "gizmo " + this.id;
    };

    // Hoozit class

    function Hoozit(id){
        this.id = id;
    }

    Hoozit.prototype = new Gizmo();

    Hoozit.prototype.test = function(id){
        return this.id === id;
    };

}());

/* === PROTOTYPAL INHERITANCE === */

(function(){

    function new_constructor(){
        //... a lot of code
    }

    var gizmo = new_constructor(Object, function (id) {
        this.id = id;
    }, {
        toString: function () {
            //...
        }
    });

    var hoozit = new_constructor(gizmo, function(id){
        this.id = id;
    }, {
        test: function(){
            //...
        }
    });

}());

/* === FUNCTION INHERITANCE === */

(function(){

    function gizmo(id){
        return {
            id: id,
            toString: function(){
                //...
            }
        };
    }

    function hoozit(id){
        var that = gizmo(id);
        that.test = function(testId){
            //...
        };
        return that;
    }

}());


