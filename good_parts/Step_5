/* ===== 5. MONADS AND GONADS ===== */

/*
* === MONAD BUILD FUNCTIONS ===
*
* function unit(value){}
*
* function bind(monad, value){}
*
* === MONAD AXIOMS ===
*
* bind(unit(value), f) ==== f(value)
* bind(monad, unit) ==== monad
* bind(bind(monad, f), g) ==== bind(monad, function(value) { return bind(f(value), g); })
*
* MONAD functions is macroid
*
* === Axioms ===
*
* unit(value).bind(f) ==== f(value)
* monad.bind(unit) ==== monad
* monad.bind(f).bind(g) ==== monad.bind(function(value){ return f(value).bind(g); })
*
* */

(function(){

    // ENTITY TYPE

    function MONAD(){
        return function unit(value) {
            var monad = Object.create(null);

            monad.bind = function(func){
                return func(value);
            };

            return monad;
        }
    }

    var unit = MONAD();

    var monad = unit('Hello world');

    monad.bind(console.log);

}());


(function(){

    // AJAX TYPE

    function MONAD(){

        var prototype = Object.create(null);

        function unit(value){
            var monad = Object.create(prototype);

            monad.bind = function(func, args){
                var _args = [value].concat(Array.prototype.slice.apply(args || []));
                return func.apply(undefined, _args);
            };
            return monad;
        }

        unit.lift = function(name, func){
            prototype[name] = func;

            prototype[name] = function(){
                var _args = Array.prototype.slice.call(arguments);
                return unit(this.bind(func, _args));
            };
            return unit;
        };

        return unit;
    }

    var ajax = MONAD()
        .lift('log', console.log);

    var monad = ajax('Bingo!');

    monad.bind(console.log); // bind still work
    monad.log(); // but also work log

}());


(function(){

    // MAYBE TYPE

    function MONAD(modifier){
        var prototype = Object.create(null);

        function unit(value){
            var monad = Object.create(prototype);

            monad.bind = function(func, args){
                var _args = [value].concat(Array.prototype.slice.apply(args || []));
                return func.apply(undefined, _args);
            };

            if(typeof modifier === 'function'){
                modifier(monad, value);
            }

            return monad;
        }

        return unit;
    }

    var maybe = MONAD(function(monad, value){
        if(value === null || value == undefined){
            monad.is_null = true;
            monad.bind = function(){
                return monad;
            }
        }
    });

    var monad_1 = maybe(null); // will trigger reassign bind method to modifier method
    var monad_2 = maybe("Bongo!");

    monad_1.bind(console.log);
    monad_2.bind(console.log);

}());

/*
* PROMISES
*
* - Promises are an excellent mechanism for managing asynchronicity.
*
* - A promise is an object that represents a possible future value
*
* - Every promise has a corresponding resolver that is used to ultimately assing
* a value to the promise.
*
* - A promise can have one of three states: 'kept', 'broken' or 'pending'.
*
* A PROMISE IS A MONAD
*
* - The value is not known when the monad is made.
*
* - Each promise is linked to two resolver functions, keep() and break(),
* that determine the promise's success and value
*
* - when() can take two functions, bind() only one.
*
*
* */