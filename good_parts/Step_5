/* ===== 5. MONADS AND GONADS ===== */


function unit(value){

}

function bind(monad, value){

}

/* MONAD AXIOMS
*
* bind(unit(value), f) ==== f(value)
* bind(monad, unit) ==== monad
* bind(bind(monad, f), g) ==== bind(monad, function(value) { return bind(f(value), g); })
*
* MONAD functions is macroid
*
* Axioms
*
* unit(value).bind(f) ==== f(value)
* monad.bind(unit) ==== monad
* monad.bind(f).bind(g) ==== monad.bind(function(value){ return f(value).bind(g); })
*
* */

(function(){

    // ENTITY TYPE

    function MONAD(){
        return function unit(value) {
            var monad = Object.create(null);

            monad.bind = function(func){
                return func(value);
            };

            return monad;
        }
    }

    var unit = MONAD();

    var monad = unit('Hello world');

    monad.bind(console.log);

}());


(function(){

    // AJAX TYPE

    function MONAD(){

        var prototype = Object.create(null);

        function unit(value){
            var monad = Object.create(prototype);

            monad.bind = function(func, args){
                var _args = [value].concat(Array.prototype.slice.apply(args || []));
                return func.apply(undefined, _args);
            };
            return monad;
        }

        unit.lift = function(name, func){
            prototype[name] = func;

            prototype[name] = function(){
                var _args = Array.prototype.slice.call(arguments);
                return unit(this.bind(func, _args));
            };
            return unit;
        };

        return unit;
    }

    var ajax = MONAD()
        .lift('log', console.log);

    var monad = ajax('Bingo!');

    monad.bind(console.log); // bind still work
    monad.log(); // but also work log

}());